// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/auth.proto

package authconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	auth "github.com/manhrev/labeler/pkg/api/go/auth"
	rpc "github.com/manhrev/labeler/pkg/api/go/auth/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceSignUpProcedure is the fully-qualified name of the AuthService's SignUp RPC.
	AuthServiceSignUpProcedure = "/auth.AuthService/SignUp"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.AuthService/Login"
	// AuthServiceMeProcedure is the fully-qualified name of the AuthService's Me RPC.
	AuthServiceMeProcedure = "/auth.AuthService/Me"
	// AuthServiceGetImageToLabelProcedure is the fully-qualified name of the AuthService's
	// GetImageToLabel RPC.
	AuthServiceGetImageToLabelProcedure = "/auth.AuthService/GetImageToLabel"
	// AuthServiceUpdateImageAfterLabeledProcedure is the fully-qualified name of the AuthService's
	// UpdateImageAfterLabeled RPC.
	AuthServiceUpdateImageAfterLabeledProcedure = "/auth.AuthService/UpdateImageAfterLabeled"
	// AuthServiceRollbackLabeledImageProcedure is the fully-qualified name of the AuthService's
	// RollbackLabeledImage RPC.
	AuthServiceRollbackLabeledImageProcedure = "/auth.AuthService/RollbackLabeledImage"
	// AuthServiceGetMyLabeledImageProcedure is the fully-qualified name of the AuthService's
	// GetMyLabeledImage RPC.
	AuthServiceGetMyLabeledImageProcedure = "/auth.AuthService/GetMyLabeledImage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                       = auth.File_auth_auth_proto.Services().ByName("AuthService")
	authServiceSignUpMethodDescriptor                  = authServiceServiceDescriptor.Methods().ByName("SignUp")
	authServiceLoginMethodDescriptor                   = authServiceServiceDescriptor.Methods().ByName("Login")
	authServiceMeMethodDescriptor                      = authServiceServiceDescriptor.Methods().ByName("Me")
	authServiceGetImageToLabelMethodDescriptor         = authServiceServiceDescriptor.Methods().ByName("GetImageToLabel")
	authServiceUpdateImageAfterLabeledMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("UpdateImageAfterLabeled")
	authServiceRollbackLabeledImageMethodDescriptor    = authServiceServiceDescriptor.Methods().ByName("RollbackLabeledImage")
	authServiceGetMyLabeledImageMethodDescriptor       = authServiceServiceDescriptor.Methods().ByName("GetMyLabeledImage")
)

// AuthServiceClient is a client for the auth.AuthService service.
type AuthServiceClient interface {
	SignUp(context.Context, *connect.Request[rpc.SignUpRequest]) (*connect.Response[rpc.SignUpResponse], error)
	Login(context.Context, *connect.Request[rpc.LoginRequest]) (*connect.Response[rpc.LoginResponse], error)
	Me(context.Context, *connect.Request[rpc.MeRequest]) (*connect.Response[rpc.MeResponse], error)
	GetImageToLabel(context.Context, *connect.Request[rpc.GetImageToLabelRequest]) (*connect.Response[rpc.GetImageToLabelResponse], error)
	UpdateImageAfterLabeled(context.Context, *connect.Request[rpc.UpdateImageAfterLabeledRequest]) (*connect.Response[rpc.UpdateImageAfterLabeledResponse], error)
	RollbackLabeledImage(context.Context, *connect.Request[rpc.RollbackLabeledImageRequest]) (*connect.Response[rpc.RollbackLabeledImageResponse], error)
	GetMyLabeledImage(context.Context, *connect.Request[rpc.GetMyLabeledImageRequest]) (*connect.Response[rpc.GetMyLabeledImageResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signUp: connect.NewClient[rpc.SignUpRequest, rpc.SignUpResponse](
			httpClient,
			baseURL+AuthServiceSignUpProcedure,
			connect.WithSchema(authServiceSignUpMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[rpc.LoginRequest, rpc.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		me: connect.NewClient[rpc.MeRequest, rpc.MeResponse](
			httpClient,
			baseURL+AuthServiceMeProcedure,
			connect.WithSchema(authServiceMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getImageToLabel: connect.NewClient[rpc.GetImageToLabelRequest, rpc.GetImageToLabelResponse](
			httpClient,
			baseURL+AuthServiceGetImageToLabelProcedure,
			connect.WithSchema(authServiceGetImageToLabelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateImageAfterLabeled: connect.NewClient[rpc.UpdateImageAfterLabeledRequest, rpc.UpdateImageAfterLabeledResponse](
			httpClient,
			baseURL+AuthServiceUpdateImageAfterLabeledProcedure,
			connect.WithSchema(authServiceUpdateImageAfterLabeledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rollbackLabeledImage: connect.NewClient[rpc.RollbackLabeledImageRequest, rpc.RollbackLabeledImageResponse](
			httpClient,
			baseURL+AuthServiceRollbackLabeledImageProcedure,
			connect.WithSchema(authServiceRollbackLabeledImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMyLabeledImage: connect.NewClient[rpc.GetMyLabeledImageRequest, rpc.GetMyLabeledImageResponse](
			httpClient,
			baseURL+AuthServiceGetMyLabeledImageProcedure,
			connect.WithSchema(authServiceGetMyLabeledImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signUp                  *connect.Client[rpc.SignUpRequest, rpc.SignUpResponse]
	login                   *connect.Client[rpc.LoginRequest, rpc.LoginResponse]
	me                      *connect.Client[rpc.MeRequest, rpc.MeResponse]
	getImageToLabel         *connect.Client[rpc.GetImageToLabelRequest, rpc.GetImageToLabelResponse]
	updateImageAfterLabeled *connect.Client[rpc.UpdateImageAfterLabeledRequest, rpc.UpdateImageAfterLabeledResponse]
	rollbackLabeledImage    *connect.Client[rpc.RollbackLabeledImageRequest, rpc.RollbackLabeledImageResponse]
	getMyLabeledImage       *connect.Client[rpc.GetMyLabeledImageRequest, rpc.GetMyLabeledImageResponse]
}

// SignUp calls auth.AuthService.SignUp.
func (c *authServiceClient) SignUp(ctx context.Context, req *connect.Request[rpc.SignUpRequest]) (*connect.Response[rpc.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// Login calls auth.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[rpc.LoginRequest]) (*connect.Response[rpc.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Me calls auth.AuthService.Me.
func (c *authServiceClient) Me(ctx context.Context, req *connect.Request[rpc.MeRequest]) (*connect.Response[rpc.MeResponse], error) {
	return c.me.CallUnary(ctx, req)
}

// GetImageToLabel calls auth.AuthService.GetImageToLabel.
func (c *authServiceClient) GetImageToLabel(ctx context.Context, req *connect.Request[rpc.GetImageToLabelRequest]) (*connect.Response[rpc.GetImageToLabelResponse], error) {
	return c.getImageToLabel.CallUnary(ctx, req)
}

// UpdateImageAfterLabeled calls auth.AuthService.UpdateImageAfterLabeled.
func (c *authServiceClient) UpdateImageAfterLabeled(ctx context.Context, req *connect.Request[rpc.UpdateImageAfterLabeledRequest]) (*connect.Response[rpc.UpdateImageAfterLabeledResponse], error) {
	return c.updateImageAfterLabeled.CallUnary(ctx, req)
}

// RollbackLabeledImage calls auth.AuthService.RollbackLabeledImage.
func (c *authServiceClient) RollbackLabeledImage(ctx context.Context, req *connect.Request[rpc.RollbackLabeledImageRequest]) (*connect.Response[rpc.RollbackLabeledImageResponse], error) {
	return c.rollbackLabeledImage.CallUnary(ctx, req)
}

// GetMyLabeledImage calls auth.AuthService.GetMyLabeledImage.
func (c *authServiceClient) GetMyLabeledImage(ctx context.Context, req *connect.Request[rpc.GetMyLabeledImageRequest]) (*connect.Response[rpc.GetMyLabeledImageResponse], error) {
	return c.getMyLabeledImage.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.AuthService service.
type AuthServiceHandler interface {
	SignUp(context.Context, *connect.Request[rpc.SignUpRequest]) (*connect.Response[rpc.SignUpResponse], error)
	Login(context.Context, *connect.Request[rpc.LoginRequest]) (*connect.Response[rpc.LoginResponse], error)
	Me(context.Context, *connect.Request[rpc.MeRequest]) (*connect.Response[rpc.MeResponse], error)
	GetImageToLabel(context.Context, *connect.Request[rpc.GetImageToLabelRequest]) (*connect.Response[rpc.GetImageToLabelResponse], error)
	UpdateImageAfterLabeled(context.Context, *connect.Request[rpc.UpdateImageAfterLabeledRequest]) (*connect.Response[rpc.UpdateImageAfterLabeledResponse], error)
	RollbackLabeledImage(context.Context, *connect.Request[rpc.RollbackLabeledImageRequest]) (*connect.Response[rpc.RollbackLabeledImageResponse], error)
	GetMyLabeledImage(context.Context, *connect.Request[rpc.GetMyLabeledImageRequest]) (*connect.Response[rpc.GetMyLabeledImageResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceSignUpHandler := connect.NewUnaryHandler(
		AuthServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(authServiceSignUpMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceMeHandler := connect.NewUnaryHandler(
		AuthServiceMeProcedure,
		svc.Me,
		connect.WithSchema(authServiceMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetImageToLabelHandler := connect.NewUnaryHandler(
		AuthServiceGetImageToLabelProcedure,
		svc.GetImageToLabel,
		connect.WithSchema(authServiceGetImageToLabelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateImageAfterLabeledHandler := connect.NewUnaryHandler(
		AuthServiceUpdateImageAfterLabeledProcedure,
		svc.UpdateImageAfterLabeled,
		connect.WithSchema(authServiceUpdateImageAfterLabeledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRollbackLabeledImageHandler := connect.NewUnaryHandler(
		AuthServiceRollbackLabeledImageProcedure,
		svc.RollbackLabeledImage,
		connect.WithSchema(authServiceRollbackLabeledImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetMyLabeledImageHandler := connect.NewUnaryHandler(
		AuthServiceGetMyLabeledImageProcedure,
		svc.GetMyLabeledImage,
		connect.WithSchema(authServiceGetMyLabeledImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceSignUpProcedure:
			authServiceSignUpHandler.ServeHTTP(w, r)
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceMeProcedure:
			authServiceMeHandler.ServeHTTP(w, r)
		case AuthServiceGetImageToLabelProcedure:
			authServiceGetImageToLabelHandler.ServeHTTP(w, r)
		case AuthServiceUpdateImageAfterLabeledProcedure:
			authServiceUpdateImageAfterLabeledHandler.ServeHTTP(w, r)
		case AuthServiceRollbackLabeledImageProcedure:
			authServiceRollbackLabeledImageHandler.ServeHTTP(w, r)
		case AuthServiceGetMyLabeledImageProcedure:
			authServiceGetMyLabeledImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignUp(context.Context, *connect.Request[rpc.SignUpRequest]) (*connect.Response[rpc.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.SignUp is not implemented"))
}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[rpc.LoginRequest]) (*connect.Response[rpc.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Me(context.Context, *connect.Request[rpc.MeRequest]) (*connect.Response[rpc.MeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.Me is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetImageToLabel(context.Context, *connect.Request[rpc.GetImageToLabelRequest]) (*connect.Response[rpc.GetImageToLabelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.GetImageToLabel is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateImageAfterLabeled(context.Context, *connect.Request[rpc.UpdateImageAfterLabeledRequest]) (*connect.Response[rpc.UpdateImageAfterLabeledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.UpdateImageAfterLabeled is not implemented"))
}

func (UnimplementedAuthServiceHandler) RollbackLabeledImage(context.Context, *connect.Request[rpc.RollbackLabeledImageRequest]) (*connect.Response[rpc.RollbackLabeledImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.RollbackLabeledImage is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyLabeledImage(context.Context, *connect.Request[rpc.GetMyLabeledImageRequest]) (*connect.Response[rpc.GetMyLabeledImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.AuthService.GetMyLabeledImage is not implemented"))
}
