// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/rpc/get_my_labeled_image.proto

package rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/manhrev/labeler/pkg/api/go/auth/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.Category(0)
)

// Validate checks the field values on GetMyLabeledImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyLabeledImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyLabeledImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyLabeledImageRequestMultiError, or nil if none found.
func (m *GetMyLabeledImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyLabeledImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := model.Category_name[int32(m.GetCategory())]; !ok {
		err := GetMyLabeledImageRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetMyLabeledImageRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMyLabeledImageRequestMultiError(errors)
	}

	return nil
}

// GetMyLabeledImageRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyLabeledImageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyLabeledImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyLabeledImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyLabeledImageRequestMultiError) AllErrors() []error { return m }

// GetMyLabeledImageRequestValidationError is the validation error returned by
// GetMyLabeledImageRequest.Validate if the designated constraints aren't met.
type GetMyLabeledImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLabeledImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLabeledImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLabeledImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLabeledImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLabeledImageRequestValidationError) ErrorName() string {
	return "GetMyLabeledImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLabeledImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLabeledImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLabeledImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLabeledImageRequestValidationError{}

// Validate checks the field values on GetMyLabeledImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyLabeledImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyLabeledImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyLabeledImageResponseMultiError, or nil if none found.
func (m *GetMyLabeledImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyLabeledImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyLabeledImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyLabeledImageResponseValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyLabeledImageResponseValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyLabeledImageResponseMultiError(errors)
	}

	return nil
}

// GetMyLabeledImageResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyLabeledImageResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMyLabeledImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyLabeledImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyLabeledImageResponseMultiError) AllErrors() []error { return m }

// GetMyLabeledImageResponseValidationError is the validation error returned by
// GetMyLabeledImageResponse.Validate if the designated constraints aren't met.
type GetMyLabeledImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLabeledImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLabeledImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLabeledImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLabeledImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLabeledImageResponseValidationError) ErrorName() string {
	return "GetMyLabeledImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLabeledImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLabeledImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLabeledImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLabeledImageResponseValidationError{}
