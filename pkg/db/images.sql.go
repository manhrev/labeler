// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: images.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getImageToLabel = `-- name: GetImageToLabel :one
SELECT id, category, background_type, labeler_id, name, display_name, url1, url2, url3, url_selected, created_at, updated_at FROM images
WHERE url_selected IS NULL LIMIT 1
`

func (q *Queries) GetImageToLabel(ctx context.Context) (Image, error) {
	row := q.db.QueryRow(ctx, getImageToLabel)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.BackgroundType,
		&i.LabelerID,
		&i.Name,
		&i.DisplayName,
		&i.Url1,
		&i.Url2,
		&i.Url3,
		&i.UrlSelected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateImageAfterLabeled = `-- name: UpdateImageAfterLabeled :one
UPDATE images
  set 
    url_selected = $2,
    labeler_id = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, category, background_type, labeler_id, name, display_name, url1, url2, url3, url_selected, created_at, updated_at
`

type UpdateImageAfterLabeledParams struct {
	ID          int64
	UrlSelected pgtype.Int2
	LabelerID   pgtype.Int8
}

func (q *Queries) UpdateImageAfterLabeled(ctx context.Context, arg UpdateImageAfterLabeledParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImageAfterLabeled, arg.ID, arg.UrlSelected, arg.LabelerID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.BackgroundType,
		&i.LabelerID,
		&i.Name,
		&i.DisplayName,
		&i.Url1,
		&i.Url2,
		&i.Url3,
		&i.UrlSelected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateImageLabelerID = `-- name: UpdateImageLabelerID :one
UPDATE images
  set 
    labeler_id = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, category, background_type, labeler_id, name, display_name, url1, url2, url3, url_selected, created_at, updated_at
`

type UpdateImageLabelerIDParams struct {
	ID        int64
	LabelerID pgtype.Int8
}

func (q *Queries) UpdateImageLabelerID(ctx context.Context, arg UpdateImageLabelerIDParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImageLabelerID, arg.ID, arg.LabelerID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.BackgroundType,
		&i.LabelerID,
		&i.Name,
		&i.DisplayName,
		&i.Url1,
		&i.Url2,
		&i.Url3,
		&i.UrlSelected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateImageUrlSelected = `-- name: UpdateImageUrlSelected :one
UPDATE images
  set 
    url_selected = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, category, background_type, labeler_id, name, display_name, url1, url2, url3, url_selected, created_at, updated_at
`

type UpdateImageUrlSelectedParams struct {
	ID          int64
	UrlSelected pgtype.Int2
}

func (q *Queries) UpdateImageUrlSelected(ctx context.Context, arg UpdateImageUrlSelectedParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImageUrlSelected, arg.ID, arg.UrlSelected)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.BackgroundType,
		&i.LabelerID,
		&i.Name,
		&i.DisplayName,
		&i.Url1,
		&i.Url2,
		&i.Url3,
		&i.UrlSelected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
