// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, display_name, email
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, password, display_name, created_at, updated_at, email
`

type CreateUserParams struct {
	Username    string
	Password    string
	DisplayName string
	Email       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.DisplayName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const findUserByFilters = `-- name: FindUserByFilters :many
SELECT id, username, password, display_name, created_at, updated_at, email FROM users
WHERE
  (username = $1 OR $1 IS NULL) AND
  (display_name = $2 OR $2 IS NULL) AND
  (id = $3 OR $3 IS NULL)
`

type FindUserByFiltersParams struct {
	Username    string
	DisplayName string
	ID          int64
}

func (q *Queries) FindUserByFilters(ctx context.Context, arg FindUserByFiltersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findUserByFilters, arg.Username, arg.DisplayName, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.DisplayName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one


SELECT id, username, password, display_name, created_at, updated_at, email FROM users
WHERE id = $1 LIMIT 1
`

// -- name: UpdateAuthor :exec
// UPDATE authors
//
//	set name = $2,
//	bio = $3
//
// WHERE id = $1;
// -- name: DeleteAuthor :exec
// DELETE FROM authors
// WHERE id = $1;
func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, display_name, created_at, updated_at, email FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, display_name, created_at, updated_at, email FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.DisplayName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
