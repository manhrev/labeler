// @generated by protoc-gen-connect-query v0.2.3 with parameter "target=js+dts"
// @generated from file auth/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { SignUpRequest, SignUpResponse } from "./rpc/sign_up_pb.js";
import { LoginRequest, LoginResponse } from "./rpc/login_pb.js";
import { MeRequest, MeResponse } from "./rpc/me_pb.js";
import { GetImageToLabelRequest, GetImageToLabelResponse } from "./rpc/get_image_to_label_pb.js";
import { UpdateImageAfterLabeledRequest, UpdateImageAfterLabeledResponse } from "./rpc/update_image_after_labeled_pb.js";
import { RollbackLabeledImageRequest, RollbackLabeledImageResponse } from "./rpc/rollback_labeled_image_pb.js";
import { GetMyLabeledImageRequest, GetMyLabeledImageResponse } from "./rpc/get_my_labeled_image_pb.js";
import { CountMyLabeledImagesRequest, CountMyLabeledImagesResponse } from "./rpc/count_my_labeled_images_pb.js";

export const typeName = "auth.AuthService";

/**
 * @generated from rpc auth.AuthService.SignUp
 */
export const signUp = createQueryService({
  service: {
    methods: {
      signUp: {
        name: "SignUp",
        kind: MethodKind.Unary,
        I: SignUpRequest,
        O: SignUpResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).signUp;

/**
 * @generated from rpc auth.AuthService.Login
 */
export const login = createQueryService({
  service: {
    methods: {
      login: {
        name: "Login",
        kind: MethodKind.Unary,
        I: LoginRequest,
        O: LoginResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).login;

/**
 * @generated from rpc auth.AuthService.Me
 */
export const me = createQueryService({
  service: {
    methods: {
      me: {
        name: "Me",
        kind: MethodKind.Unary,
        I: MeRequest,
        O: MeResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).me;

/**
 * @generated from rpc auth.AuthService.GetImageToLabel
 */
export const getImageToLabel = createQueryService({
  service: {
    methods: {
      getImageToLabel: {
        name: "GetImageToLabel",
        kind: MethodKind.Unary,
        I: GetImageToLabelRequest,
        O: GetImageToLabelResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).getImageToLabel;

/**
 * @generated from rpc auth.AuthService.UpdateImageAfterLabeled
 */
export const updateImageAfterLabeled = createQueryService({
  service: {
    methods: {
      updateImageAfterLabeled: {
        name: "UpdateImageAfterLabeled",
        kind: MethodKind.Unary,
        I: UpdateImageAfterLabeledRequest,
        O: UpdateImageAfterLabeledResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).updateImageAfterLabeled;

/**
 * @generated from rpc auth.AuthService.RollbackLabeledImage
 */
export const rollbackLabeledImage = createQueryService({
  service: {
    methods: {
      rollbackLabeledImage: {
        name: "RollbackLabeledImage",
        kind: MethodKind.Unary,
        I: RollbackLabeledImageRequest,
        O: RollbackLabeledImageResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).rollbackLabeledImage;

/**
 * @generated from rpc auth.AuthService.GetMyLabeledImage
 */
export const getMyLabeledImage = createQueryService({
  service: {
    methods: {
      getMyLabeledImage: {
        name: "GetMyLabeledImage",
        kind: MethodKind.Unary,
        I: GetMyLabeledImageRequest,
        O: GetMyLabeledImageResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).getMyLabeledImage;

/**
 * @generated from rpc auth.AuthService.CountMyLabeledImages
 */
export const countMyLabeledImages = createQueryService({
  service: {
    methods: {
      countMyLabeledImages: {
        name: "CountMyLabeledImages",
        kind: MethodKind.Unary,
        I: CountMyLabeledImagesRequest,
        O: CountMyLabeledImagesResponse,
      },
    },
    typeName: "auth.AuthService",
  },
}).countMyLabeledImages;
